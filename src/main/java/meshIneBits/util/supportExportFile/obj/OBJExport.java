/*
 * MeshIneBits is a Java software to disintegrate a 3d project (model in .stl)
 * into a network of standard parts (called "Bits").
 *
 * Copyright (C) 2016-2022 DANIEL Laurent.
 * Copyright (C) 2016  CASSARD Thibault & GOUJU Nicolas.
 * Copyright (C) 2017-2018  TRAN Quoc Nhat Han.
 * Copyright (C) 2018 VALLON Benjamin.
 * Copyright (C) 2018 LORIMER Campbell.
 * Copyright (C) 2018 D'AUTUME Christian.
 * Copyright (C) 2019 DURINGER Nathan (Tests).
 * Copyright (C) 2020-2021 CLAIRIS Etienne & RUSSO Andr√©.
 * Copyright (C) 2020-2021 DO Quang Bao.
 * Copyright (C) 2021 VANNIYASINGAM Mithulan.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 *
 */

/*
 * MeshExport - Exports obj and x3d files with color from processing with beginRecord and endRecord
 * by Jesse Louis-Rosenberg
 * http://n-e-r-v-o-u-s.com
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * <p/>
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * <p/>
 * You should have received a copy of the GNU Lesser General
 * Public License; if not,
 * write to the Free Software Foundation, Inc., 59 Temple Place,
 * Suite 330, Boston, MA  02111-1307  USA
 */

package meshIneBits.util.supportExportFile.obj;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

public class OBJExport extends MeshExport {

  @Override
  protected void writeVertices() {
    float v[];
    for (int i = 0; i < ptCount; ++i) {
      v = pts[i];
      writer.println("v " + v[0] + " " + v[1] + " " + v[2]);
    }
  }

  @Override
  protected void writeFaces() {
    int index = 1;
    for (int i = 0; i < faceCount; ++i) {
      int[] f = faces[i];
      if (colorFlag) {
        String output = "f";
        for (int j = 0; j < f.length; ++j) {
          if (f.length == 3 || f.length == 4) {
            output += " " + f[j] + "/" + index++;
          } else {
            output += " " + f[j] + "/" + 1;
          }
        }
        writer.println(output);
      } else {
        writeFace(f);
      }
    }
  }

  protected void writeFace(int[] f) {
    String output = "f";
    for (int j = 0; j < f.length; ++j) {
      output += " " + f[j];
    }
    writer.println(output);
  }

  @Override
  protected void writeHeader() {
    writer.println("#generated by MeshExport by Nervous System");
    writer.println("#http://n-e-r-v-o-u-s.com/tools/obj");
    if (colorFlag) {
      writer.println("mtllib " + filenameSimple + ".mtl");
      writer.println("usemtl " + filenameSimple);
      writeMaterial();
    }
  }

  protected void writeMaterial() {
    PrintWriter matWriter = null;
    try {
      String filepath = file.getParent();
      matWriter = new PrintWriter(
          new FileWriter(new File(filepath + "\\" + filenameSimple + ".mtl")));
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
    matWriter.println("newmtl " + filenameSimple);
    matWriter.println("Ka 1.000 1.000 1.000");
    matWriter.println("Kd 1.000 1.000 1.000");
    matWriter.println("Ks 0.000 0.000 0.000");
    matWriter.println("d 1.0");
    //do texture
    matWriter.println("map_Ka " + filenameSimple + ".png");
    matWriter.println("map_Kd " + filenameSimple + ".png");
    matWriter.flush();
    matWriter.close();
  }

  @Override
  protected void writeTexCoord(float u, float v) {
    writer.println("vt " + u + " " + v);
  }
}